{"version":3,"sources":["Component/Hello.js","ActionTypes/ProductActionTypes.js","Action/ProductAction.js","App.js","registerServiceWorker.js","Reducer/index.js","Reducer/ProductReducer.js","Sagas/ProductSaga.js","Sagas/index.js","index.js"],"names":["Hello","react_default","a","createElement","className","this","props","name","Component","GET_PRODUCT","GET_PRODUCT_SUCCESS","GET_PRODUCT_FAILURE","getProduct","type","ProductActionTypes","getProductSuccess","data","payload","getProductFailure","error","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleScan","setState","result","handleError","err","console","changeState","scan","state","value","alert","Component_Hello","onClick","lib_default","delay","onError","onScan","showViewFinder","resolution","withRouter","connect","products","productsInfo","Products","isLoading","dispatch","actions","bindActionCreators","productActions","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","rootReducer","combineReducers","arguments","length","undefined","ProductsError","action","ProductActionType","objectSpread","getProductSaga","getProductWatcher","url","regenerator_default","wrap","_context","prev","next","fetch","json","sent","put","ProductAction","t0","stop","_marked","_context2","takeLatest","_marked2","rootSaga","Sagas_marked","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","createLogger","run","ReactDOM","render","es","BrowserRouter","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6df74087.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Hello extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h2>{this.props.name}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hello;","export const GET_PRODUCT = \"GET_PRODUCT\";\r\nexport const GET_PRODUCT_SUCCESS = \"GET_PRODUCT_SUCCESS\";\r\nexport const GET_PRODUCT_FAILURE = \"GET_PRODUCT_FAILURE\";\r\n\r\n","import * as ProductActionTypes from '../ActionTypes/ProductActionTypes';\r\n\r\n \r\nexport function getProduct(){\r\n    return{\r\n    type:ProductActionTypes.GET_PRODUCT\r\n    }\r\n}\r\n\r\nexport function getProductSuccess(data){\r\n    return{\r\n        type:ProductActionTypes.GET_PRODUCT_SUCCESS,\r\n        payload:data\r\n    }\r\n}\r\n\r\nexport function getProductFailure(error){\r\n    return{\r\n        type:ProductActionTypes.GET_PRODUCT_FAILURE,\r\n        payload:error\r\n    }\r\n}","import React, { Component } from 'react';\r\n//import logo from './logo.svg';\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport './App.css';\r\nimport Hello from './Component/Hello'\r\nimport * as productActions from './Action/ProductAction';\r\n//import { withRouter,Route, Switch, Link} from \"react-router-dom\";\r\nimport { withRouter } from \"react-router-dom\";\r\n//import ProductList from './Component/ProductList';\r\nimport QrReader from 'react-qr-reader'\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      value : \"Scan QRcode - Give camera access to scan\",\r\n      result: 'No result',\r\n      scan: false\r\n\r\n    }\r\n  }\r\n//  componentWillMount(){\r\n//   this.props.actions.getProduct();\r\n//  }\r\nhandleScan = data => {\r\n  if (data) {\r\n    this.setState({\r\n      result: data\r\n    })\r\n  }\r\n}\r\nhandleError = err => {\r\n  console.error(err)\r\n}\r\n\r\n changeState = () => {\r\n  this.setState({\r\n    scan:true\r\n  });\r\n }\r\n  render() {\r\n    alert(this.state.result);\r\n    return (\r\n      <div className=\"App\">\r\n        <Hello name={this.state.value} />\r\n       <button type=\"button\"onClick={this.changeState}>Scan</button> \r\n         {this.state.scan ?\r\n         <div className=\"size\">\r\n         <QrReader\r\n          delay={100}\r\n          onError={this.handleError}\r\n          onScan={this.handleScan} \r\n          showViewFinder={true}\r\n          resolution={1600}\r\n        />\r\n        </div> : \"\" }\r\n        <p>{this.state.result}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    products:state.productsInfo.Products,\r\n    isLoading: state.productsInfo.isLoading\r\n\r\n  }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: bindActionCreators(productActions, dispatch)\r\n\r\n  }\r\n\r\n}\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\r\n\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import ProductReducer from './ProductReducer';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    productsInfo :ProductReducer\r\n})\r\n\r\nexport default rootReducer;\r\n","import * as ProductActionType from '../ActionTypes/ProductActionTypes';\r\n\r\nexport default function productReducer(state= {Products:[] ,ProductsError:{}, isLoading:false},action){\r\n    switch(action.type){\r\n        case ProductActionType.GET_PRODUCT:\r\n      return {\r\n        ...state,\r\n        isLoading: true\r\n      };\r\n        case  ProductActionType.GET_PRODUCT_SUCCESS:\r\n        return { Products:action.payload ,isLoading: false }\r\n\r\n        case ProductActionType.GET_PRODUCT_FAILURE:\r\n        return {ProductsError:action.payload,isLoading: false}\r\n\r\n        default:\r\n        return state;\r\n    }\r\n}\r\n","import * as ProductAction from '../Action/ProductAction';\r\nimport * as ProductActionTypes from '../ActionTypes/ProductActionTypes';\r\nimport { put, takeLatest } from \"redux-saga/effects\";\r\n\r\nlet url = \"http://localhost:4000/products\"\r\n\r\nexport function* getProductSaga(){\r\n    try {\r\n        let result = yield fetch(url).then(result => result.json());\r\n        yield put (ProductAction.getProductSuccess(result)); \r\n\r\n    } catch(error){\r\n\r\n        yield put (ProductAction.getProductFailure(error));\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function*  getProductWatcher(){\r\n    yield takeLatest(ProductActionTypes.GET_PRODUCT,getProductSaga)\r\n}","import {getProductWatcher} from './ProductSaga';\r\n\r\n\r\nexport default function* rootSaga() {\r\n  yield getProductWatcher()\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport rootReducer from \"./Reducer\";\r\nimport rootSaga from \"./Sagas\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nlet sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware, createLogger()));\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App />\r\n        </Router>\r\n    </Provider>, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}